// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/ports/repository.go -destination=tests/mocks/mock_vote_repository.go -package=mocks VoteRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "bbb-voting/internal/core/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVoteRepository is a mock of VoteRepository interface.
type MockVoteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVoteRepositoryMockRecorder
	isgomock struct{}
}

// MockVoteRepositoryMockRecorder is the mock recorder for MockVoteRepository.
type MockVoteRepositoryMockRecorder struct {
	mock *MockVoteRepository
}

// NewMockVoteRepository creates a new mock instance.
func NewMockVoteRepository(ctrl *gomock.Controller) *MockVoteRepository {
	mock := &MockVoteRepository{ctrl: ctrl}
	mock.recorder = &MockVoteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoteRepository) EXPECT() *MockVoteRepositoryMockRecorder {
	return m.recorder
}

// GetResultsByParticipant mocks base method.
func (m *MockVoteRepository) GetResultsByParticipant(ctx context.Context) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResultsByParticipant", ctx)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResultsByParticipant indicates an expected call of GetResultsByParticipant.
func (mr *MockVoteRepositoryMockRecorder) GetResultsByParticipant(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResultsByParticipant", reflect.TypeOf((*MockVoteRepository)(nil).GetResultsByParticipant), ctx)
}

// GetTotalVotes mocks base method.
func (m *MockVoteRepository) GetTotalVotes(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalVotes", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalVotes indicates an expected call of GetTotalVotes.
func (mr *MockVoteRepositoryMockRecorder) GetTotalVotes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalVotes", reflect.TypeOf((*MockVoteRepository)(nil).GetTotalVotes), ctx)
}

// GetVotesByHour mocks base method.
func (m *MockVoteRepository) GetVotesByHour(ctx context.Context) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotesByHour", ctx)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotesByHour indicates an expected call of GetVotesByHour.
func (mr *MockVoteRepositoryMockRecorder) GetVotesByHour(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotesByHour", reflect.TypeOf((*MockVoteRepository)(nil).GetVotesByHour), ctx)
}

// StoreInRedis mocks base method.
func (m *MockVoteRepository) StoreInRedis(ctx context.Context, vote *domain.VoteRedis) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreInRedis", ctx, vote)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreInRedis indicates an expected call of StoreInRedis.
func (mr *MockVoteRepositoryMockRecorder) StoreInRedis(ctx, vote any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreInRedis", reflect.TypeOf((*MockVoteRepository)(nil).StoreInRedis), ctx, vote)
}
