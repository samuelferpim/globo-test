// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/ports/service.go -destination=tests/mocks/mock_vote_service.go -package=mocks VoteService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "bbb-voting/internal/core/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVoteService is a mock of VoteService interface.
type MockVoteService struct {
	ctrl     *gomock.Controller
	recorder *MockVoteServiceMockRecorder
	isgomock struct{}
}

// MockVoteServiceMockRecorder is the mock recorder for MockVoteService.
type MockVoteServiceMockRecorder struct {
	mock *MockVoteService
}

// NewMockVoteService creates a new mock instance.
func NewMockVoteService(ctrl *gomock.Controller) *MockVoteService {
	mock := &MockVoteService{ctrl: ctrl}
	mock.recorder = &MockVoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoteService) EXPECT() *MockVoteServiceMockRecorder {
	return m.recorder
}

// CastVote mocks base method.
func (m *MockVoteService) CastVote(ctx context.Context, vote *domain.Vote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CastVote", ctx, vote)
	ret0, _ := ret[0].(error)
	return ret0
}

// CastVote indicates an expected call of CastVote.
func (mr *MockVoteServiceMockRecorder) CastVote(ctx, vote any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CastVote", reflect.TypeOf((*MockVoteService)(nil).CastVote), ctx, vote)
}

// GetDetailedResults mocks base method.
func (m *MockVoteService) GetDetailedResults(ctx context.Context) (domain.DetailedResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailedResults", ctx)
	ret0, _ := ret[0].(domain.DetailedResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailedResults indicates an expected call of GetDetailedResults.
func (mr *MockVoteServiceMockRecorder) GetDetailedResults(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailedResults", reflect.TypeOf((*MockVoteService)(nil).GetDetailedResults), ctx)
}

// GetTotalVotes mocks base method.
func (m *MockVoteService) GetTotalVotes(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalVotes", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalVotes indicates an expected call of GetTotalVotes.
func (mr *MockVoteServiceMockRecorder) GetTotalVotes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalVotes", reflect.TypeOf((*MockVoteService)(nil).GetTotalVotes), ctx)
}

// GetVotesByHour mocks base method.
func (m *MockVoteService) GetVotesByHour(ctx context.Context) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotesByHour", ctx)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotesByHour indicates an expected call of GetVotesByHour.
func (mr *MockVoteServiceMockRecorder) GetVotesByHour(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotesByHour", reflect.TypeOf((*MockVoteService)(nil).GetVotesByHour), ctx)
}
